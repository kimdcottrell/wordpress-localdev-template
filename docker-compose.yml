services:

  ##
  # The web server container.
  ##
  webserver:
    build:
      context: ./images
      dockerfile: webserver.Dockerfile
      target: dev
      args:
        LOCAL_MACHINE_GID: ${LOCAL_MACHINE_GID-1000}
        LOCAL_MACHINE_UID: ${LOCAL_MACHINE_UID-1000}
    
    networks:
      - default
      - proxy

    # These get parsed automagically now. See "Using environment variables in nginx configuration" at https://hub.docker.com/_/nginx/
    environment:
      SERVER_NAME: ${SERVER_NAME}
      PHP_FPM_CONTAINER: app

    volumes:
      - wordpress:/var/www/html
      - vendor:/var/www/vendor 
      - ./tools/local-env/nginx.conf.template:/etc/nginx/templates/default.conf.template
      - ./wp-content:/var/www/html/wp-content # if you leave this out, nginx can't find uploaded files, despite them existing on your local machine
      

    depends_on:
      app:
        condition: service_started
      db:
        condition: service_healthy

    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      # Tell Traefik you are planning a redirection, and to include the needed middleware
      - traefik.http.middlewares.wptestlocaldev-redirect-web-secure.redirectscheme.scheme=https
      - traefik.http.routers.wptestlocaldev.middlewares=wptestlocaldev-redirect-web-secure
      # The domain the service will respond to, and what is in your /etc/hosts
      - traefik.http.routers.wptestlocaldev-web.rule=Host(`${SERVER_NAME}`)
      # Allow request only from the predefined entry point named "web"
      - traefik.http.routers.wptestlocaldev-web.entrypoints=web # this is working with the port 80 entrypoint in the traefik config (a different docker-compose.yml)
      # Let's redirect!
      - traefik.http.routers.wptestlocaldev-web-secure.rule=Host(`${SERVER_NAME}`)
      - traefik.http.routers.wptestlocaldev-web-secure.tls=true
      - traefik.http.routers.wptestlocaldev-web-secure.entrypoints=web-secure
      # What is essentially in this container's Dockerfile or image's Dockerfile under the `EXPOSE` setting
      - traefik.http.services.wptestlocaldev-web-secure.loadbalancer.server.port=80 # this can be anything, but mirror the change back to the Dockerfile via EXPOSE      
  
  ##
  # The PHP-FPM container that only holds WordPress
  ##
  app:
    build:
      context: ./images
      dockerfile: app.Dockerfile
      target: dev
      args:
        LOCAL_PHP_VERSION: ${LOCAL_PHP_VERSION}
        LOCAL_MACHINE_GID: ${LOCAL_MACHINE_GID-1000}
        LOCAL_MACHINE_UID: ${LOCAL_MACHINE_UID-1000}

    networks:
      - default

    env_file: .env

    environment:
      WORDPRESS_CONFIG_EXTRA: |
        require_once ABSPATH . 'extra-wp-config.php';

    volumes:
      - ./tools/local-env/php-config.ini:/usr/local/etc/php/conf.d/php-config.ini
      - ./tools/local-env/phpcs.xml.dist:/var/www/phpcs.xml.dist
      - wordpress:/var/www/html
      - vendor:/var/www/vendor
      - ./wp-content:/var/www/html/wp-content
      - ./extra-wp-config.php:/var/www/html/extra-wp-config.php

    # The init directive ensures the command runs with a PID > 1, so Ctrl+C works correctly.
    init: true

    # Needed for the loopback events inside WordPress - leaving this out causes them to fail, as seen under Tools > Site Health
    extra_hosts:
      - ${SERVER_NAME}:host-gateway


  ##
  # The database container. Either MySQL or MariaDB
  ##
  db:
    image: mariadb:${LOCAL_DB_VERSION-latest}

    networks:
      - default

    ports:
      - "3306"

    environment:
      MARIADB_USER: ${WORDPRESS_DB_USER}
      MARIADB_ROOT_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      MARIADB_DATABASE: ${WORDPRESS_DB_NAME}

    volumes:
      - ./tools/local-env/mysql-init.sql:/docker-entrypoint-initdb.d/mysql-init.sql
      - db:/var/lib/mysql

    healthcheck:
      test: [ "CMD-SHELL", "mariadb-admin --password=${WORDPRESS_DB_PASSWORD} ping -h localhost" ]
      timeout: 5s
      interval: 5s
      retries: 10


  ##
  # WP-CLI
  ##
  cli:
    build:
      context: ./images
      dockerfile: cli.Dockerfile
      target: dev
      args:
        LOCAL_PHP_VERSION: ${LOCAL_PHP_VERSION}
        LOCAL_MACHINE_GID: ${LOCAL_MACHINE_GID-1000}
        LOCAL_MACHINE_UID: ${LOCAL_MACHINE_UID-1000}
    
    # this is not ran when you run the container like `docker compose run cli bash`
    command: wp core install --url=${SERVER_NAME} --title="WordPress Test" --admin_user=admin --admin_password=password --admin_email=admin@${SERVER_NAME} --skip-email

    networks:
      - default

    env_file: .env

    depends_on:
      app:
        condition: service_started
      db:
        condition: service_healthy

    volumes:
      - wordpress:/var/www/html
      - vendor:/var/www/vendor
      - ./wp-content:/var/www/html/wp-content
      
    # The init directive ensures the command runs with a PID > 1, so Ctrl+C works correctly.
    init: true


  composer:
    image: composer:latest

    volumes:
      - wordpress:/var/www/html
      - vendor:/var/www/vendor
      - ./wp-content:/var/www/html/wp-content
      - ./composer.json:/var/www/composer.json
      # - ./composer.lock:/var/www/composer.lock # uncomment this when this is no longer a template and restart the container

    working_dir: /var/www/

    # this is not ran when you run the container like `docker compose run composer composer`
    command: composer install

volumes:
  db:
  node_modules:
  vendor:
  wordpress:
  

networks:
  # Creating our own network allows us to connect between containers using their service name.
  default:
    driver: bridge
  proxy:
    external: true
