services:

  ##
  # The web server container.
  ##
  webserver:
    image: nginx:alpine

    networks:
      - default
      - proxy

    # These get parsed automagically now. See "Using environment variables in nginx configuration" at https://hub.docker.com/_/nginx/
    environment:
      SERVER_NAME: ${SERVER_NAME}
      PHP_FPM_CONTAINER: php

    volumes:
      - ./tools/local-env/nginx.conf.template:/etc/nginx/templates/default.conf.template
      - wordpress:/var/www/html/
      - ./vendor:/var/www/vendor # TODO: do we need this or does the proxy pass all php requests off in a manner that makes this redundant?

    depends_on:
      php:
        condition: service_started
      db:
        condition: service_healthy

    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      # Tell Traefik you are planning a redirection, and to include the needed middleware
      - traefik.http.middlewares.wptestlocaldev-redirect-web-secure.redirectscheme.scheme=https
      - traefik.http.routers.wptestlocaldev.middlewares=wptestlocaldev-redirect-web-secure
      # The domain the service will respond to, and what is in your /etc/hosts
      - traefik.http.routers.wptestlocaldev-web.rule=Host(`${SERVER_NAME}`)
      # Allow request only from the predefined entry point named "web"
      - traefik.http.routers.wptestlocaldev-web.entrypoints=web # this is working with the port 80 entrypoint in the traefik config (a different docker-compose.yml)
      # Let's redirect!
      - traefik.http.routers.wptestlocaldev-web-secure.rule=Host(`${SERVER_NAME}`)
      - traefik.http.routers.wptestlocaldev-web-secure.tls=true
      - traefik.http.routers.wptestlocaldev-web-secure.entrypoints=web-secure
      # What is essentially in this container's Dockerfile or image's Dockerfile under the `EXPOSE` setting
      - traefik.http.services.wptestlocaldev-web-secure.loadbalancer.server.port=80 # this can be anything, but mirror the change back to the Dockerfile via EXPOSE      
  
  ##
  # The PHP-FPM container that only holds WordPress
  ##
  php:
    image: wordpress:php${LOCAL_PHP_VERSION-8.3}-fpm

    networks:
      - default

    env_file: .env

    environment:
      WORDPRESS_CONFIG_EXTRA: |
        require_once ABSPATH . 'extra-wp-config.php';

    volumes:
      - ./tools/local-env/php-config.ini:/usr/local/etc/php/conf.d/php-config.ini
      - wordpress:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./vendor:/var/www/vendor
      - ./extra-wp-config.php:/var/www/html/extra-wp-config.php

    # The init directive ensures the command runs with a PID > 1, so Ctrl+C works correctly.
    init: true


  ##
  # The database container. Either MySQL or MariaDB
  ##
  db:
    image: ${LOCAL_DB_TYPE-mysql}:${LOCAL_DB_VERSION-latest}

    networks:
      - default

    ports:
      - "3306"

    environment:
      MYSQL_ROOT_PASSWORD: password

    volumes:
      - ./tools/local-env/mysql-init.sql:/docker-entrypoint-initdb.d/mysql-init.sql
      - db:/var/lib/mysql

    healthcheck:
      test: [ "CMD-SHELL", "if [ \"$LOCAL_DB_TYPE\" = \"mariadb\" ]; then mariadb-admin ping -h localhost; else mysqladmin ping -h localhost; fi" ]
      timeout: 5s
      interval: 5s
      retries: 10


  ##
  # WP-CLI
  ##
  cli:
    image: wordpress:cli-php${LOCAL_PHP_VERSION-8.3}

    # This alpine image's user is 82, but debian wordpress is 33. These need to be the same or wp-cli cannot write any files
    user: 33:33 

    networks:
      - default

    env_file: .env

    depends_on:
      php:
        condition: service_started
      db:
        condition: service_healthy

    volumes:
      - wordpress:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./vendor:/var/www/vendor

    # The init directive ensures the command runs with a PID > 1, so Ctrl+C works correctly.
    init: true


  composer:
    image: composer:latest

    volumes:
      - wordpress:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./vendor:/var/www/vendor
      - ./composer.json:/var/www/composer.json
      # - ./composer.lock:/var/www/composer.lock # uncomment this when this is no longer a template

    working_dir: /var/www/



volumes:
  wordpress:
  db:

networks:
  # Creating our own network allows us to connect between containers using their service name.
  default:
    driver: bridge
  proxy:
    external: true
